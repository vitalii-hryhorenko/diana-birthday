// App.tsx
import React, { useCallback, useEffect, useRef, useState } from 'react';
import './App.less';

const IMAGES = [
    { src: '/assets/images/together/together-1.jpg' },
    { src: '/assets/images/together/together-2.jpg' },
    { src: '/assets/images/together/together-3.jpg' },
    { src: '/assets/images/together/together-4.jpg' },
    { src: '/assets/images/together/together-5.jpg' },
    { src: '/assets/images/together/together-6.jpg' },
];

const App: React.FC = () => {
    const sectionRefs = useRef<(HTMLElement | null)[]>([]);
    const [popupImage, setPopupImage] = useState<string | null>(null);
    const [popupVisible, setPopupVisible] = useState(false);
    const [showTip, setShowTip] = useState<boolean>(true);

    const audioRef = useRef<HTMLAudioElement | null>(null);
    const [isPlaying, setIsPlaying] = useState(false);

    const scrollToSection = (index: number) => {
        sectionRefs.current[index]?.scrollIntoView({ behavior: 'smooth' });
    };

    const togglePopup = (image?: string) => {
        if (image) {
            setPopupImage(image);
            setPopupVisible(true);
        } else {
            setPopupVisible(false);
            setTimeout(() => setPopupImage(null), 300);
        }
    };

    const nextButtonCallback = useCallback((numberOfSection: number) => {
        return (
            <div className="scroll-button-container">
                <button className="scroll-button" onClick={() => scrollToSection(numberOfSection)}>
                    See what‚Äôs next
                </button>
            </div>
        );
    }, []);

    useEffect(() => {
        const confettiContainer = document.createElement('div');
        confettiContainer.className = 'confetti-container';
        document.body.appendChild(confettiContainer);

        for (let i = 0; i < 80; i++) {
            const confetti = document.createElement('div');
            confetti.className = 'confetti';
            confetti.style.left = `${Math.random() * 100}%`;
            confetti.style.animationDelay = `${Math.random() * 2}s`;
            confetti.style.setProperty('--i', Math.random().toString());
            confettiContainer.appendChild(confetti);
        }

        setTimeout(() => {
            confettiContainer.classList.add('fade-out');
            setTimeout(() => {
                document.body.removeChild(confettiContainer);
            }, 1000);
        }, 4000);
    }, []);

    useEffect(() => {
        audioRef.current = new Audio('/assets/music/song.mp3');
        audioRef.current.loop = true;

        return () => {
            audioRef.current?.pause();
        };
    }, []);

    return (
        <div className="App">
            {[...Array(5)].map((_, i) => (
                <section
                    key={i}
                    ref={(el) => void (sectionRefs.current[i] = el)}
                    className={`section section-${i + 1}`}
                >
                    <div className="section-content">
                        {i === 1 && (
                            <div>
                                <div className="text-box box">
                                    <div className="text">–¢—Ä–∏ —Ä–æ–∫–∏ —Ç–æ–º—É —Ü–µ–π –¥–µ–Ω—å –±—É–≤ –¥–ª—è –º–µ–Ω–µ –∑–≤–∏—á–∞–π–Ω–∏–º –≤–µ—Å–Ω—è–Ω–∏–º –¥–Ω–µ–º: —â–µ–±–µ—Ç–∞–ª–∏ –ø—Ç–∞—à–∫–∏, —É —Å–∞–¥—É —Ä–æ–∑—Ü–≤—ñ—Ç–∞–ª–∏ —è–±–ª—É–Ω—ñ, –∞ –≤ —á–∏—Å—Ç–æ–º—É –Ω–µ–±—ñ —Å—è—è–ª–æ —Å–æ–Ω—Ü–µ, –∑—ñ–≥—Ä—ñ–≤–∞—é—á–∏ –ø–æ–≤—ñ—Ç—Ä—è —Å–≤–æ—ó–º–∏ –ø—Ä–æ–º–µ–Ω—è–º–∏. –¢–∞ —Å–ø—Ä–∞–≤–∂–Ω—î —Ç–µ–ø–ª–æ —è –≤—ñ–¥—á—É–≤ –ª–∏—à–µ —Ç–æ–¥—ñ, –∫–æ–ª–∏ –∑—É—Å—Ç—Ä—ñ–≤ —Ç–µ–±–µ. –í—ñ–¥—Ç–æ–¥—ñ –≤ –º–æ—î–º—É –∂–∏—Ç—Ç—ñ –∑‚Äô—è–≤–∏–ª–æ—Å—è –±—ñ–ª—å—à–µ —Å–≤—ñ—Ç–ª–∞, —Ä–∞–¥–æ—Å—Ç—ñ –π –ª—é–±–æ–≤—ñ. –Ø –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–æ –≤–¥—è—á–Ω–∏–π, —â–æ —Å–∞–º–µ —Ç–∞–∫ —Å–∫–ª–∞–ª–∏—Å—è –æ–±—Å—Ç–∞–≤–∏–Ω–∏ ‚Äî —ñ –≤–æ–Ω–∏ –ø—Ä–∏–≤–µ–ª–∏ –º–µ–Ω–µ –¥–æ —Ç–µ–±–µ. –ö–∏—Ü—é–Ω—å, —è –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–æ —Ç–µ–±–µ –∫–æ—Ö–∞—é. –î—è–∫—É—é —â–æ —Ç–∏ –≤ –º–µ–Ω–µ —î.</div>
                                </div>
                            </div>
                        )}

                        {i === 2 && (
                            <>
                                <h2>
                                    <span className="icon">üì∑</span>
                                    –ú–æ–º–µ–Ω—Ç–∏ —Ä–∞–∑–æ–º
                                </h2>
                                <div className="gallery">
                                    {IMAGES.map((img, index) => (
                                        <div className="thumb" key={index} onClick={() => togglePopup(img.src)}>
                                            <img src={img.src} alt={`–ú–æ–º–µ–Ω—Ç ${index + 1}`} />
                                        </div>
                                    ))}
                                </div>
                            </>
                        )}

                        {i === 3 && (
                            <>
                                <h2>–ê —Ü–µ —Ç–≤—ñ–π –ø–æ–¥–∞—Ä—É–Ω–æ–∫</h2>
                                <button className="gift-button" onClick={() => togglePopup('/assets/images/gift.jpg')}>
                                    –ü–æ–¥–∏–≤–∏—Ç–∏—Å—è —â–æ —Ç–∞–º üéÅ
                                </button>
                            </>
                        )}

                        {i === 4 && (
                            <>
                                <h2>–°–µ–∫—Ü—ñ—è 5</h2>
                            </>
                        )}
                    </div>

                    {i < 4 && nextButtonCallback(i + 1)}
                </section>
            ))}

            {popupImage && (
                <div className={`popup ${!popupVisible ? 'hide' : ''}`} onClick={() => togglePopup()}>
                    <img src={popupImage} alt="Popup" />
                </div>
            )}

            <div className="music-container">
                <div className={`music-tip ${showTip && `music-tip__show`}`}>
                    <div className="music-tip__text">Alright, turn on the music and let's see what's going on here</div>
                    <img className="music-tip__arrow" src="/assets/images/arrows/arrow-1.png"/>
                </div>
                <button
                    className="music-button"
                    onClick={ () => {
                        setShowTip(false);
                        if (audioRef.current) {
                            if (isPlaying) {
                                audioRef.current.pause();
                                setIsPlaying(false);
                            } else {
                                audioRef.current.play();
                                setIsPlaying(true);
                            }
                        }
                    } }
                >
                    { isPlaying ? 'üîá' : 'üéµ' }
                </button>
            </div>
        </div>
    );
};

export default App;
